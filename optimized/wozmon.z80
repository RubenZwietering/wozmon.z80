;  The WOZ Monitor for the Apple 1
;  Written by Steve Wozniak in 1976

export wozmon

section "wozmon variables", hram
; note: not sure why there are seperate variables for XAM and ST,
;       seems to be working fine when they are one and the same.
; register ’l’ is now what used to be XAML 		; Last "opened" location Low
; register ’h’ is now what used to be XAMH 		; Last "opened" location High
; register ’l’ is now what used to be STL 		; Store address Low
; register ’h’ is now what used to be STH 		; Store address High
; register ’e’ is now what used to be L 		; Hex value parsing Low
; register ’d’ is now what used to be H 		; Hex value parsing High
csav: 				ds 1						; Used to see if hex value is given
mode: 				ds 1						; $00=XAM, $74=STOR, $B8=BLOCK XAM
; register ’b’ is now what used to be the X register
; register ’c’ is now what used to be the Y register

section "wozmon input buffer", wramx, align[8, 1]
in: 				ds $ff			;  Input buffer

section "wozmon code", romx
	wozmon.notcr
		cp $08				; "\b"?
		jr z, wozmon.backspace	; Yes.
		cp $1b				; ESC?
		jr z, wozmon.escape		; Yes.
		dec c				; Advance text index.
		jr nz, wozmon.nextchar 	; Auto ESC if == 0.
wozmon:
		ld b, high(in)
	.escape
		ld a, "\\"			; "\".
		call chrout			; Output it.
	.getline
		ld a, "\n"			; CR.
		call chrout			; Output it.
		ld c, $fe			; Initialize text index.
	.backspace
		inc c				; Back up text index.
		jr z, .getline 		; Beyond start of line, reinitialize.
	.nextchar
		call chrin			; Load character.
		ld [bc], a 			; Add to text buffer.
	; This is the only call to chrout where the ’a’ register cannot be modified
	; --- push af
		call chrout 		; Display character.
	; --- pop af
		cp "\n"				; LF?
		jr nz, .notcr 		; No.
		xor a 				; For XAM mode.
		ld c, a 			; Reset text index.
	.setblock
		add a 				; Leaves $B8 if setting BLOK XAM mode.
	.setstor
		add a				; Leaves $74 if setting STOR mode.
		ldh [mode], a 		; $00 = XAM, $74 = STOR, $B8 = BLOK XAM.
	.blskip
		dec c 				; Advance text index.
	.nextitem
		ld a, [bc] 			; Get character.
		cp "\n" 			; LF?
		jr z, .getline 		; Yes, done this line.
		cp "." 				; "."?
		jr c, .blskip 		; Skip delimiter.
		jr z, .setblock 	; Set BLOCK XAM mode.
		cp ":" 				; ":"?
		jr z, .setstor 		; Yes. Set STOR mode.
		cp "R" 				; "R"?
		jr z, .run 			; Yes. Run user program.
		ld de, 0 			; $00->Hex value parsing.
		ld a, c
		ldh [csav], a 		; Save ’c’ for comparison.
	.nexthex
		ld a, [bc] 			; Get character for hex test.
		xor "0" 			; Map digits to $0-9.
		cp 10 				; Digit?
		jr c, .dig 			; Yes.
		add $89 			; Map letter "A"-"F" to $FA-FF.
		cp $fa 				; Hex letter?
		jr c, .nothex 		; No, character not hex.
	.dig
		push bc
		ld b, 4 			; Shift count.
	.hexshift
		sla e 				; Rotate into LSD.
		rl d 				; Rotate into MSD’s.
		dec b 				; Done 4 shifts?
		jr nz, .hexshift 	; No, loop.
		pop bc
		and $0f 			; Hex digit to LSD of ’a’.
		or e
		ld e, a 			; LSD of ’a’ to LSD of ’e’
		dec c 				; Advance text index.
		jr .nexthex 		; Check next character for hex.
	.nothex
		ldh a, [csav]
		cp c 				; Check if ’de’ empty (no hex digits).
		jr z, .escape 		; Yes, generate ESC sequence.
		ldh a, [mode]
		bit 6, a 			; Test MODE byte.
		jr z, .notstor 		; B6=1 STOR, 0 for XAM and BLOCK XAM
		ld a, e 			; LSD’s of hex data.
		ldi [hl], a 		; Store at current ‘store index’. Increment store index.
		jr .nextitem 		; Get next command item.
	.run
		jp hl 				; Run at current XAM index.
	.notstor
		bit 7, a
		jr nz, .xamnext 	; B7=0 for XAM, 1 for BLOCK XAM.
		ld l, e
		ld h, d
	.nxtprnt
		jr nz, .prdata 		; NE means no address to print.
		ld a, "\n" 			; LF.
		call chrout 		; Output it.
		ld a, h 			; ‘Examine index’ high-order byte.
		call .prbyte 		; Output it in hex format.
		ld a, l 			; Low-order ‘examine index’ byte.
		call .prbyte 		; Output it in hex format.
		ld a, ":" 			; ":".
		call chrout 		; Output it.
	.prdata
		ld a, " " 			; Blank.
		call chrout 		; Output it.
		ld a, [hl] 			; Get data byte at ‘examine index’.
		call .prbyte 		; Output it in hex format.
	.xamnext
		xor a
		ldh [mode], a 		; 0->MODE (XAM mode).
		ld a, l
		cp e 				; Compare ‘examine index’ to hex data.
		ld a, h
		sbc d
		jr nc, .nextitem 	; Not less, so no more data to output.
		inc hl
		ld a, l 			; Check low-order ‘examine index’ byte
		and $03 			; For MOD 4=0
		jr .nxtprnt
	.prbyte
		push af 			; Save ’a’ for LSD.
		swap a 				; MSD to LSD position.
		call .prhex 		; Output hex digit.
		pop af 				; Restore ’a’.
	.prhex
		and $0f 			; Mask LSD for hex print.
		or "0" 				; Add "0".
		cp "0"+10 			; Digit?
		jp c, chrout 		; Yes, output it.
		add $07 			; Add offset for letter.
		jp chrout 			; Output character.